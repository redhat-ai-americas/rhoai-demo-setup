- name: Taint GPU nodes for NVIDIA GPU workloads
  hosts: localhost
  vars:
    repo_dir: "{{ lookup('env', 'REPO_DIR') | default(playbook_dir | dirname | dirname, true) }}"
  tasks:
    - name: Taint nodes
      shell: |
        oc adm taint node -l node-role.kubernetes.io/gpu nvidia.com/gpu=:NoSchedule --overwrite
        oc adm drain -l node-role.kubernetes.io/gpu --ignore-daemonsets --delete-emptydir-data
        oc adm uncordon -l node-role.kubernetes.io/gpu-headers
      register: taint_gpu_nodes
      retries: 10
      delay: 10
      until: taint_gpu_nodes.rc == 0
      changed_when: false

    - name: Verify GPU nodes are tainted
      shell: |
        oc get nodes -l node-role.kubernetes.io/gpu -o jsonpath='{.items[*].spec.taints}'
      register: gpu_node_taints
      retries: 5
      delay: 5
      until: gpu_node_taints.stdout != ""
      changed_when: false

    - name: Print GPU node taints
      debug:
        msg: "GPU nodes taints: {{ gpu_node_taints.stdout }}"
      when: gpu_node_taints.stdout != ""

    - name: Uncordon all GPU nodes
      shell: |
        for node in $(oc get nodes -l node-role.kubernetes.io/gpu -o name | awk -F/ '{print $2}'); do
          oc adm uncordon "$node"
        done
      register: uncordon_gpu_nodes

    - name: Print uncordon result for GPU nodes
      debug:
        msg: "{{ uncordon_gpu_nodes.stdout }}"

    - name: Verify GPU nodes are ready
      shell: |
        oc get nodes -l node-role.kubernetes.io/gpu -o jsonpath='{.items[*].status.conditions[?(@.type=="Ready")].status}'
      register: gpu_node_ready
      retries: 5
      delay: 5
      until: gpu_node_ready.stdout == "True"
      changed_when: false

    - name: Print GPU node readiness status
      debug:
        msg: "GPU nodes readiness status: {{ gpu_node_ready.stdout }}"
      when: gpu_node_ready.stdout == "True"
